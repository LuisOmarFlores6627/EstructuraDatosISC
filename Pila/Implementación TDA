Implementación TDA codigo de una Pila----> JAVA
-----------------------------------------------------------------------
class Nodo {
    int dato;
    Nodo siguiente;

    public Nodo(int dato) {
        this.dato = dato;
        this.siguiente = null;
    }
}

public class Pila {
    private Nodo cabeza;
    private int tamaño;

    public Pila() {
        this.cabeza = null;
        this.tamaño = 0;
    }

    public void push(int dato) {
        Nodo nuevoNodo = new Nodo(dato);
        if (cabeza == null) {
            cabeza = nuevoNodo;
        } else {
            nuevoNodo.siguiente = cabeza;
            cabeza = nuevoNodo;
        }
        tamaño++;
    }

    public int pop() {
        if (cabeza == null) {
            System.out.println("La pila está vacía");
            return -1; // o lanzar una excepción
        } else {
            int datoEliminado = cabeza.dato;
            cabeza = cabeza.siguiente;
            tamaño--;
            return datoEliminado;
        }
    }

    public int peek() {
        if (cabeza == null) {
            System.out.println("La pila está vacía");
            return -1; // o lanzar una excepción
        } else {
            return cabeza.dato;
        }
    }

    public boolean isEmpty() {
        return cabeza == null;
    }

    public int size() {
        return tamaño;
    }

    public void imprimirPila() {
        Nodo temp = cabeza;
        System.out.print("Pila: ");
        while (temp != null) {
            System.out.print(temp.dato + " ");
            temp = temp.siguiente;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Pila pila = new Pila();

        pila.push(5);
        pila.push(10);
        pila.push(15);
        pila.push(20);

        pila.imprimirPila();

        System.out.println("Tamaño de la pila: " + pila.size());

        System.out.println("Elemento en la cima de la pila: " + pila.peek());

        System.out.println("Elemento extraído de la pila: " + pila.pop());

        pila.imprimirPila();

        System.out.println("¿La pila está vacía? " + pila.isEmpty());
    }
}
---------------------------------------------------------------------------------------------------------
---------Algoritmo-------
Pila:
  Propiedades:
    - cabeza: Nodo
    - tamaño: int

Nodo:
  Propiedades:
    - dato: int
    - siguiente: Nodo

Operaciones:
  push:
    Entrada: dato (int)
    Salida: vacío
    Algoritmo:
      - Crear un nuevo Nodo con el dato proporcionado
      - Si la cabeza de la pila es nula:
        - Establecer el nuevo Nodo como la cabeza de la pila
      - Sino:
        - Establecer el siguiente del nuevo Nodo como la cabeza actual de la pila
        - Actualizar la cabeza de la pila con el nuevo Nodo
      - Incrementar el tamaño de la pila

  pop:
    Entrada: vacío
    Salida: dato (int)
    Algoritmo:
      - Si la cabeza de la pila es nula:
        - Imprimir "La pila está vacía"
        - Retornar -1 o lanzar una excepción
      - Sino:
        - Guardar el dato de la cabeza de la pila
        - Actualizar la cabeza de la pila con el siguiente Nodo
        - Decrementar el tamaño de la pila
        - Retornar el dato guardado

  peek:
    Entrada: vacío
    Salida: dato (int)
    Algoritmo:
      - Si la cabeza de la pila es nula:
        - Imprimir "La pila está vacía"
        - Retornar -1 o lanzar una excepción
      - Sino:
        - Retornar el dato de la cabeza de la pila

  isEmpty:
    Entrada: vacío
    Salida: boolean
    Algoritmo:
      - Retornar true si la cabeza de la pila es nula, false de lo contrario

  size:
    Entrada: vacío
    Salida: tamaño (int)
    Algoritmo:
      - Retornar el tamaño de la pila

  imprimirPila:
    Entrada: vacío
    Salida: vacío
    Algoritmo:
      - Crear un Nodo temporal y asignarlo a la cabeza de la pila
      - Imprimir "Pila: " seguido de los datos de cada Nodo hasta que el temporal sea nulo
-----------------------------------------------------------------------------------------------------------------


