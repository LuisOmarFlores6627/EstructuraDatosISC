------->TDA<----------
public class Arbol {
    // Atributos
    private Nodo raiz;

    // Constructor
    public Arbol() {
        this.raiz = null;
    }

    // Métodos
    // Insertar un nuevo nodo en el árbol
    public void insertar(int valor) {
        this.raiz = insertarRecursivo(this.raiz, valor);
    }

    private Nodo insertarRecursivo(Nodo nodo, int valor) {
        if (nodo == null) {
            return new Nodo(valor);
        }

        if (valor < nodo.valor) {
            nodo.izquierdo = insertarRecursivo(nodo.izquierdo, valor);
        } else if (valor > nodo.valor) {
            nodo.derecho = insertarRecursivo(nodo.derecho, valor);
        }

        return nodo;
    }

    // Recorrido en orden (inorder)
    public void inorder() {
        inorderRecursivo(this.raiz);
    }

    private void inorderRecursivo(Nodo nodo) {
        if (nodo != null) {
            inorderRecursivo(nodo.izquierdo);
            System.out.print(nodo.valor + " ");
            inorderRecursivo(nodo.derecho);
        }
    }

    // Recorrido en preorden (preorder)
    public void preorder() {
        preorderRecursivo(this.raiz);
    }

    private void preorderRecursivo(Nodo nodo) {
        if (nodo != null) {
            System.out.print(nodo.valor + " ");
            preorderRecursivo(nodo.izquierdo);
            preorderRecursivo(nodo.derecho);
        }
    }

    // Recorrido en postorden (postorder)
    public void postorder() {
        postorderRecursivo(this.raiz);
    }

    private void postorderRecursivo(Nodo nodo) {
        if (nodo != null) {
            postorderRecursivo(nodo.izquierdo);
            postorderRecursivo(nodo.derecho);
            System.out.print(nodo.valor + " ");
        }
    }

    // Método principal (main)
    public static void main(String[] args) {
        Arbol arbol = new Arbol();

        // Insertar elementos en el árbol
        arbol.insertar(10);
        arbol.insertar(5);
        arbol.insertar(15);
        arbol.insertar(3);
        arbol.insertar(7);
        arbol.insertar(12);
        arbol.insertar(17);

        // Mostrar el árbol en diferentes órdenes
        System.out.println("Inorder:");
        arbol.inorder();
        System.out.println("\nPreorder:");
        arbol.preorder();
        System.out.println("\nPostorder:");
        arbol.postorder();
    }
}

class Nodo {
    int valor;
    Nodo izquierdo;
    Nodo derecho;

    public Nodo(int valor) {
        this.valor = valor;
        this.izquierdo = null;
        this.derecho = null;
    }
}
-------------------------------------------------------------------------------

-------Salida en consola--------------
Inorder:
3 5 7 10 12 15 17 
Preorder:
10 5 3 7 15 12 17 
Postorder:
3 7 5 12 17 15 10 

---------------------------------------------------------
