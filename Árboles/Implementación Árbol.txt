Un árbol binario es una estructura de datos jerárquica en la que cada nodo tiene como máximo dos hijos, que se 
denominan "izquierda" y "derecha". La estructura se denomina "binaria" porque cada nodo tiene, como máximo, dos hijos.
La estructura básica de un nodo en un árbol binario generalmente contiene tres componentes principales:
-Valor: Es el valor que el nodo contiene.
-Referencia al hijo izquierdo: Es una referencia al nodo hijo que está a la izquierda del nodo actual. Este hijo debe tener un valor menor que el valor del nodo actual en un árbol de búsqueda binaria.
-Referencia al hijo derecho: Es una referencia al nodo hijo que está a la derecha del nodo actual. Este hijo debe tener un valor mayor que el valor del nodo actual en un árbol de búsqueda binaria.
Los árboles binarios se utilizan en una variedad de aplicaciones, como la implementación de estructuras de datos como árboles de búsqueda binaria, árboles AVL para mantener el equilibrio, expresiones aritméticas, estructuras de datos de archivos, entre otros.
------------------>Implementación de un Árbol en Java<---------------------  
class Nodo {
    int valor;
    Nodo izquierda, derecha;

    public Nodo(int item) {
        valor = item;
        izquierda = derecha = null;
    }
}

class ArbolBinario {
    Nodo raiz;

    ArbolBinario() {
        raiz = null;
    }

    void insertar(int valor) {
        raiz = insertarNodo(raiz, valor);
    }

    Nodo insertarNodo(Nodo nodo, int valor) {
        if (nodo == null) {
            nodo = new Nodo(valor);
            return nodo;
        }

        if (valor < nodo.valor)
            nodo.izquierda = insertarNodo(nodo.izquierda, valor);
        else if (valor > nodo.valor)
            nodo.derecha = insertarNodo(nodo.derecha, valor);

        return nodo;
    }

    void imprimirInOrden(Nodo nodo) {
        if (nodo != null) {
            imprimirInOrden(nodo.izquierda);
            System.out.print(nodo.valor + " ");
            imprimirInOrden(nodo.derecha);
        }
    }

    void imprimirPreOrden(Nodo nodo) {
        if (nodo != null) {
            System.out.print(nodo.valor + " ");
            imprimirPreOrden(nodo.izquierda);
            imprimirPreOrden(nodo.derecha);
        }
    }

    void imprimirPostOrden(Nodo nodo) {
        if (nodo != null) {
            imprimirPostOrden(nodo.izquierda);
            imprimirPostOrden(nodo.derecha);
            System.out.print(nodo.valor + " ");
        }
    }

    public static void main(String[] args) {
        ArbolBinario arbol = new ArbolBinario();

        arbol.insertar(50);
        arbol.insertar(30);
        arbol.insertar(20);
        arbol.insertar(40);
        arbol.insertar(70);
        arbol.insertar(60);
        arbol.insertar(80);

        System.out.println("Recorrido Inorden del árbol:");
        arbol.imprimirInOrden(arbol.raiz);

        System.out.println("\nRecorrido Preorden del árbol:");
        arbol.imprimirPreOrden(arbol.raiz);

        System.out.println("\nRecorrido Postorden del árbol:");
        arbol.imprimirPostOrden(arbol.raiz);
    }
}
--------------------------------------
-----------Salida de consola-----------
Recorrido Inorden del árbol:
20 30 40 50 60 70 80 
Recorrido Preorden del árbol:
50 30 20 40 70 60 80 
Recorrido Postorden del árbol:
20 40 30 60 80 70 50 
---------------------------------------






